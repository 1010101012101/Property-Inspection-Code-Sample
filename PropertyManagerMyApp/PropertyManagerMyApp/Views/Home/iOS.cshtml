@{
    ViewBag.Title = "iOS Apps Configuration Instructions";
}

<div class="jumbotron">
    <h1>iOS Apps</h1>
    <p class="lead">This page includes helpful information about the iOS Apps and how to install them.</p>
    <p><a href="https://github.com/OfficeDev/Property-Inspection-Code-Sample" class="btn btn-primary btn-lg">Download the source code from GitHub &raquo;</a></p>
</div>
<div class="row">
    <h2>Overview</h2>
    <p>
        The iOS Apps demonstrate many different patterns used in real world scenarios.  At a high level, the iOS Apps do the following things.
        <ul>
            <li>Provide property inspectors and repair people information about properties they are scheduled to inspect and repair.</li>
            <li>Allow property inspectors and repair people to submit photos and comments about inspections, incidents, and repairs.</li>
        </ul>
        The sections below provide more information about these patterns and how to get up and running.  You <b>do not need</b> a Max or XCode to configure the iOS Apps.
    </p>
</div>
<div class="row">
    <h2>Getting Started</h2>
    Some configuration is required to enable the iOS Apps to work with an O365 environment.  Read on to learn about the configuration process.
    <h3>Azure Active Directory Apps</h3>
    <p>The iOS Apps use O365 APIs and SharePoint REST APIs to interact with an O365 / Azure tenancy.  The Azure Active Directory Applications are used to authorize the iOS Apps.  To register the iOS Apps with an Azure Active Directory follow these instructions.</p>
    <h4>Create Azure Active Directory App for the iPad Apps</h4>
    <ol>
        <li>Open the Azure Management Portal</li>
        <li>Select <b>Active Directory</b></li>
        <li>Click on your AAD</li>
        <li>Click <b>Applications</b></li>
        <li>Click <b>Add</b></li>
        <li>Click <b>Add an application my organization is developing</b></li>
        <li>In the Name textbox enter <b>PropertyManagementiOSiPadApp</b></li>
        <li>For Type, select <b>NATIVE CLIENT APPLICATION</b></li>
        <li>Click the <b>Arrow button</b></li>
        <li>In the Redirect URI textbox enter <b><u>http://PropertyManagementiOSiPadApp</u></b></li>
        <li>Click the <b>Checkmark button</b></li>
        <li>Expand the update your code section and <b>copy</b> the Redirect URI and Client ID values and <b>paste</b> them into a text file.  You will use these values when you configure the iPad app on your iPad.</li>
        <li>Click <b>Configure</b></li>
        <li>
            In the permissions to other applications section, click the dropdown list next to Windows Azure Active Directory and select the following permissions.
            <br />
            <img src="~/Content/Images/iOS App AAD Perms.png" />
        </li>
        <li>
            Configure the permissions to Exchange, use the screenshot below for reference.
            <br />
            <img src="~/Content/Images/iOS App Exchange Perms.png" />
        </li>
        <li>
            Configure the permissions to SharePoint, use the screenshot below for reference.
            <br />
            <img src="~/Content/Images/iOS App SP Perms.png" />
        </li>
        <li>Click <b>Save</b></li>
    </ol>   
    <h3>iOS App Installation</h3>
    <p>Now you are ready to install the iOS Apps.  This section provides details about your installation options.</p>
    <p>The easiest way to install the iOS apps to your iPad is to download the .ipa files to your computer and install them on your iPad.  iFunBox is a tool capable of deploying iOS Apps to a non-rooted iPad.</p>
    <p>Optionally, you can clone the GitHub repository and load the iOS App Workspaces in XCode then run them in the iOS Simulator or deploy them to an iPad.  This option requires a Mac and XCode.  If you choose this option please see the installation notes in the GitHub repository which describe how to register the CocoaPods with the iOS projects.  The CocoaPods must be installed to enable the iOS Apps project workspaces to build and run.</p>
    <p><b>Note:</b> A Mac and XCode is required if you wish to debug the iOS code.</p>
    <h3>iOS App Configuration</h3>
    <p>After the iOS Apps are deployed, you need to configure them to work with an O365 / Azure Tenancy and the Azure Active Directory Applications you created.</p>
    <h4>Configure iPad Apps settings</h4>
    <p>
        To configure the iPad Apps settings follow these instructions.  You need to perform these same steps for both the Inspection and Repair iOS apps.
    </p>
    <ol>
        <li>Tap the <b>iPad App</b> on the iPad to open it.</li>
        <li>After the iPad App is loaded and the Sign In screen is displayed, push the <b>home button</b> two times and close the running instance of the application.</li>
        <li>Next, open the <b>native iOS Settings App</b>.</li>
        <li>In the left column, tap the <b>name of the app.</b></li>
        <li>Enter the values which correspond to the Azure Active Directory application you created for the iPad Apps.</li>
        <li>Enter the URL to the Site Collection created by the Property Manager My App.</li>
        <li>Enter the email address for the Dispatcher. (katiej&#64;&lt;Your Tenancy&gt;.onmicrosoft.com)</li>
    </ol>
    <p>These are the values that must be configured.</p>
    <ul>
        <li>
            clientID - This is the value you copied and pasted in the steps above.  This value is also displayed in the CONFIGURE page for the iOSiPadApp Azure Active Directory Application in the Azure Management Portal.
        </li>
        <li>
            redirectUriString - This is the value you copied and pasted in the steps above.  This value is also displayed in the CONFIGURE page for the iOSiPadApp Azure Active Directory Application in the Azure Management Portal.
        </li>
        <li>
            authority - This value is partially displayed in the VIEW ENDPOINTS popup page for the Azure Active Directory Application in the Azure Management Portal.  Use the domain associated with the OAUTH 2.0 TOKEN ENDPOINT.  If you are running on production O365 this value is https://login.windows.net.
        </li>
        <li>
            resourceId - This value is partially displayed in the VIEW ENDPOINTS popup page for the Azure Active Directory Application in the Azure Management Portal.  Use the domain associated with the OAUTH 2.0 TOKEN ENDPOINT and append /common to it.  If you are running on production O365 this value is https://login.windows.net/common.
        </li>        
        <li>demoSiteCollectionUrl - Url for the Site Collection created by the Property Manager My App.  Use the same value you configured in the web.config for the Property Manager My App for the DemoSiteCollectionUrl app setting.
        </li>
        <li>dispatcherEmail - Email address for the dispatcher account you created.</li>
    </ul>    
    <h3>Finished!</h3>
    <p>Now you can use the iOS Apps.</p>
</div>
